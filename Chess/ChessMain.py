'''
Main driver file. Responsible fro handling user input and displaying the current GameState
'''

import pygame as p
import ChessEngine
import AI_Moves


BOARD_WIDTH = BOARD_HEIGHT = 512 # BOARD_HEIGHT and BOARD_WIDTH of the window
MOVE_LOG_PANEL_WIDTH = 150
MOVE_LOG_PANEL_HEIGHT = BOARD_HEIGHT
DIMENSION = 8 #dimensions of a chess board are 8x8
SQ_SIZE = BOARD_HEIGHT // DIMENSION
MAX_FPS = 15 #speed of animation on screen
IMAGES = {} 
'''
Intialize a global dictionary of images. THis will be called exactly once in main
Need not call images every time which makes game fast
'''

def loadImages():
    pieces = ['wR','wp','wN','wB','wK','wQ','bp','bR','bN','bB','bK','bQ']
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("images/" + piece + ".png"),(SQ_SIZE,SQ_SIZE))
        #transform image into size of square
        
    #stored images in variables now images can be accessed with "IMAGES[piece]"

'''
The main driver for our code. This will handle user input and updating the graphics according to moves
'''

def main():
    p.init() #intializes all necessary modules in pygame
    screen = p.display.set_mode((BOARD_WIDTH+MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT)) #create a screen
    moveLogFont = p.font.SysFont("Arial", 14, False, False) #font for move log
    clock = p.time.Clock() #create a clock, used to measure time taken by each player
    screen.fill(p.Color("white"))
    gs = ChessEngine.GameState()
    validMoves = gs.getValidMoves()
    moveMade = False #flag variable for when a move is made, this helps to create new valid moves
    animate = False #flag variable for when we should animate a move
    # print(gs.board)
    loadImages() #only do this once, before the while loop
    running = True
    sqSELECTED = () #no square is selected initially, keep track of last click of user (tuple: (row,col))
    playerClicks = [] #keep track of player clicks (tuple of two positions)
    gameOver = False
    playerOne = False #if human is playing white, then this is True, if AI is playing then False
    playerTwo = False #if human is playing black, then this is True, if AI is playing then False
    
    while running:
        humanTurn = (gs.whiteToMove and playerOne) or (not gs.whiteToMove and playerTwo)

        for e in p.event.get():
            if e.type == p.QUIT:
                running = False

            #mouse handler
            elif e.type == p.MOUSEBUTTONDOWN: #mouse is clicked
                if not gameOver and humanTurn:
                    location = p.mouse.get_pos() #(x,y) location of mouse
                    col = location[0]//SQ_SIZE   #get column
                    row = location[1]//SQ_SIZE   #get row

                    if sqSELECTED == (row,col) or col>=8: #undo when clicked on same square twice
                        sqSELECTED = () #deselect
                        playerClicks = [] #clear player clicks
                    else:
                        sqSELECTED = (row,col)
                        playerClicks.append(sqSELECTED) #append for both 1st and 2nd clicks
                    if len(playerClicks) == 2: #after 2nd click
                        move = ChessEngine.Move(playerClicks[0],playerClicks[1],gs.board)
                        # print(move.getChessNotation())
                        for i in range(len(validMoves)):
                            if move == validMoves[i]:
                                gs.makeMove(validMoves[i]) #move generated by engine to avoid bugs
                                moveMade = True
                                animate = True
                                sqSELECTED = () #reset user clicks
                                playerClicks = []
                        if not moveMade:
                            playerClicks = [sqSELECTED]

            #key handler
            elif e.type == p.KEYDOWN:   #undo when 'z' is pressed
                if e.key == p.K_z:
                    gs.undoMove()
                    moveMade = True
                    animate = False
                    gameOver = False
                if e.key == p.K_r: #reset the board when 'r' is pressed
                    gs = ChessEngine.GameState()
                    validMoves = gs.getValidMoves()
                    sqSELECTED = ()
                    playerClicks = []
                    moveMade = False
                    animate = False
                    gameOver = False

        '''AI move finder logic'''
        if not gameOver and not humanTurn:
            AIMove = AI_Moves.findBestMoveMinMax(gs,validMoves)
            if AIMove is None:
                AIMove = AI_Moves.findRandomMove(validMoves)
            gs.makeMove(AIMove)
            moveMade = True
            animate = True

        if moveMade: 
            if animate:
                animateMove(gs.movelog[-1],screen,gs.board,clock)
            validMoves = gs.getValidMoves()
            moveMade = False
            animate = False
        
        drawGameState(screen,gs,validMoves,sqSELECTED, moveLogFont)

        if gs.checkmate or gs.stalemate:
            gameOver = True
            text = "Stalemate"  if gs.stalemate else "Black wins by checkmate" if gs.whiteToMove else "White wins by checkmate"
            drawEndGameText(screen,text)

        clock.tick(MAX_FPS)
        p.display.flip()


## Graphics on Board
def drawGameState(screen, gs,validMoves,sqSELECTED,moveLogFont):
    drawBoard(screen) #draw squares on board
    highlightSquares(screen,gs,gs.getValidMoves(),sqSELECTED)
    drawPieces(screen,gs.board)
    drawMoveLog(screen,gs,moveLogFont)


def drawBoard(screen):
    ##draw squares
    global colors
    colors = [p.Color("white"),p.Color("gray")]
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            color = colors[((r+c)%2)]
            p.draw.rect(screen, color, p.Rect(c*SQ_SIZE,r*SQ_SIZE,SQ_SIZE,SQ_SIZE)) 

'''
Highlight square selected and moves for piece selected
'''
def highlightSquares(screen,gs,validMoves,sqSelected):
    if sqSelected != ():
        r,c = sqSelected
        if gs.board[r][c][0] == ('w' if gs.whiteToMove else 'b'): #sqSelected is a piece that can be moved
            s = p.Surface((SQ_SIZE,SQ_SIZE))
            s.set_alpha(100) #transparency value
            s.fill(p.Color('blue'))
            screen.blit(s,(c*SQ_SIZE,r*SQ_SIZE))
            #highlight moves from that square
            s.fill(p.Color('yellow'))
            for move in validMoves:
                if move.startRow == r and move.startCol == c:
                    screen.blit(s,(move.endCol*SQ_SIZE,move.endRow*SQ_SIZE))


def drawPieces(screen, board):
    ##draw pieces
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            piece = board[r][c]
            if piece != "--":
                screen.blit(IMAGES[piece],p.Rect(c*SQ_SIZE,r*SQ_SIZE,SQ_SIZE,SQ_SIZE))


'''Draw the move log'''
def drawMoveLog(screen,gs,font):
    moveLogRect = p.Rect(BOARD_WIDTH,0,MOVE_LOG_PANEL_WIDTH,MOVE_LOG_PANEL_HEIGHT)
    p.draw.rect(screen,p.Color("black"),moveLogRect)
    moveLog = gs.movelog
    moveTexts = [] #modify later
    for i in range(0,len(moveLog),2):
        moveString = str(i//2 + 1) + ". " + str(moveLog[i]) + " "
        if i+1 < len(moveLog):
            moveString += str(moveLog[i+1]) + " "
        moveTexts.append(moveString)
    padding = 5
    textY = padding
    linespace = 2
    for i in range(len(moveTexts)):
        text = moveTexts[i]
        textObject = font.render(text,True,p.Color('White'))
        textLocation = moveLogRect.move(padding,textY)
        screen.blit(textObject,textLocation)
        textY += textObject.get_height() + linespace
'''
Animating a move
'''
def animateMove(move,screen,board,clock):
    global colors
    coords = [] #list of coordinates that the animation will move through
    dR = move.endRow - move.startRow
    dC = move.endCol - move.startCol
    framesPerSquare = 10 #frames to move one square
    frameCount = (abs(dR) + abs(dC))*framesPerSquare
    for frame in range(frameCount + 1):
        r,c = (move.startRow + dR*frame/frameCount, move.startCol + dC*frame/frameCount)
        drawBoard(screen)
        drawPieces(screen,board)
        #erase the piece from ending square
        color = colors[(move.endRow + move.endCol) % 2]
        endSquare = p.Rect(move.endCol*SQ_SIZE,move.endRow*SQ_SIZE,SQ_SIZE,SQ_SIZE)
        p.draw.rect(screen,color,endSquare)
        #draw captured piece onto rectangle
        if move.pieceCaptured != '--':
            if move.isEnpassantMove: #special animation case for en passant
                enPassantRow = move.endRow + 1 if move.pieceCaptured[0] == 'b' else move.endRow - 1
                endSquare = p.Rect(move.endCol*SQ_SIZE,enPassantRow*SQ_SIZE,SQ_SIZE,SQ_SIZE)
            screen.blit(IMAGES[move.pieceCaptured],endSquare)
        #draw moving piece
        screen.blit(IMAGES[move.pieceMoved],p.Rect(c*SQ_SIZE,r*SQ_SIZE,SQ_SIZE,SQ_SIZE))
        p.display.flip()
        clock.tick(60)

def drawEndGameText(screen, text):
    # Define colors
    text_color = p.Color('White')
    shadow_color = p.Color('Black')
    background_color = p.Color('Gray')
    background_alpha = 128

    # Set up the font
    font = p.font.SysFont("Helvetica", 32, True, False)

    # Render the text
    text_object = font.render(text, True, text_color)
    shadow_object = font.render(text, True, shadow_color)

    # Get the size and position of the text
    text_rect = text_object.get_rect(center=(BOARD_WIDTH / 2, BOARD_HEIGHT / 2))
    shadow_rect = shadow_object.get_rect(center=(BOARD_WIDTH / 2 + 2, BOARD_HEIGHT / 2 + 2))

    # Create a background surface with transparency
    background_surface = p.Surface((text_rect.BOARD_WIDTH + 20, text_rect.BOARD_HEIGHT + 20), p.SRCALPHA)
    background_surface.fill((0, 0, 0, 0))
    p.draw.rect(background_surface, background_color, background_surface.get_rect(), border_radius=10)
    background_surface.set_alpha(background_alpha)

    # Position the background
    background_rect = background_surface.get_rect(center=(BOARD_WIDTH / 2, BOARD_HEIGHT / 2))

    # Blit everything onto the screen
    screen.blit(background_surface, background_rect)
    screen.blit(shadow_object, shadow_rect)
    screen.blit(text_object, text_rect)

if __name__ == "__main__":
    main()
