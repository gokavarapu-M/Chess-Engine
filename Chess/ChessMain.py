'''
Main driver file. Responsible fro handling user input and displaying the current GameState
'''

import pygame as p
import ChessEngine


WIDTH = HEIGHT = 512 # height and width of the window
DIMENSION = 8 #dimensions of a chess board are 8x8
SQ_SIZE = HEIGHT // DIMENSION
MAX_FPS = 15 #speed of animation on screen
IMAGES = {} 
'''
Intialize a global dictionary of images. THis will be called exactly once in main
Need not call images every time which makes game fast
'''

def loadImages():
    pieces = ['wR','wp','wN','wB','wK','wQ','bp','bR','bN','bB','bK','bQ']
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("images/" + piece + ".png"),(SQ_SIZE,SQ_SIZE))
        #transform image into size of square
        
    #stored images in variables now images can be accessed with "IMAGES[piece]"

'''
The main driver for our code. This will handle user input and updating the graphics according to moves
'''

def main():
    p.init() #intializes all necessary modules in pygame
    screen = p.display.set_mode((WIDTH, HEIGHT)) #create a screen
    clock = p.time.Clock() #create a clock, used to measure time taken by each player
    screen.fill(p.Color("white"))
    gs = ChessEngine.GameState()
    validMoves = gs.getValidMoves()
    moveMade = False #flag variable for when a move is made, this helps to create new valid moves
    animate = False #flag variable for when we should animate a move
    # print(gs.board)
    loadImages() #only do this once, before the while loop
    running = True
    sqSELECTED = () #no square is selected initially, keep track of last click of user (tuple: (row,col))
    playerClicks = [] #keep track of player clicks (tuple of two positions)
    gameOver = False
    
    while running:
        for e in p.event.get():
            if e.type == p.QUIT:
                running = False

            #mouse handler
            elif e.type == p.MOUSEBUTTONDOWN: #mouse is clicked
                if not gameOver:
                    location = p.mouse.get_pos() #(x,y) location of mouse
                    col = location[0]//SQ_SIZE   #get column
                    row = location[1]//SQ_SIZE   #get row
                    if sqSELECTED == (row,col): #undo when clicked on same square twice
                        sqSELECTED = () #deselect
                        playerClicks = [] #clear player clicks
                    else:
                        sqSELECTED = (row,col)
                        playerClicks.append(sqSELECTED) #append for both 1st and 2nd clicks
                    if len(playerClicks) == 2: #after 2nd click
                        move = ChessEngine.Move(playerClicks[0],playerClicks[1],gs.board)
                        print(move.getChessNotation())
                        for i in range(len(validMoves)):
                            if move == validMoves[i]:
                                gs.makeMove(validMoves[i]) #move generated by engine to avoid bugs
                                moveMade = True
                                animate = True
                                sqSELECTED = () #reset user clicks
                                playerClicks = []
                        if not moveMade:
                            playerClicks = [sqSELECTED]

            #key handler
            elif e.type == p.KEYDOWN:   #undo when 'z' is pressed
                if e.key == p.K_z:
                    gs.undoMove()
                    moveMade = True
                    animate = False
                if e.key == p.K_r: #reset the board when 'r' is pressed
                    gs = ChessEngine.GameState()
                    validMoves = gs.getValidMoves()
                    sqSELECTED = ()
                    playerClicks = []
                    moveMade = False
                    animate = False

        if moveMade: 
            if animate:
                animateMove(gs.movelog[-1],screen,gs.board,clock)
            validMoves = gs.getValidMoves()
            moveMade = False
            animate = False
        
        drawGameState(screen,gs,validMoves,sqSELECTED)

        if gs.checkmate:
            gameOver = True
            if gs.whiteToMove:
                drawText(screen,"Black wins by checkmate")
            else:
                drawText(screen,"White wins by checkmate")
        elif gs.stalemate:
            gameOver = True
            drawText(screen,"Stalemate")

        clock.tick(MAX_FPS)
        p.display.flip()



'''
Highlight square selected and moves for piece selected
'''
def highlightSquares(screen,gs,validMoves,sqSelected):
    if sqSelected != ():
        r,c = sqSelected
        if gs.board[r][c][0] == ('w' if gs.whiteToMove else 'b'): #sqSelected is a piece that can be moved
            s = p.Surface((SQ_SIZE,SQ_SIZE))
            s.set_alpha(100) #transparency value
            s.fill(p.Color('blue'))
            screen.blit(s,(c*SQ_SIZE,r*SQ_SIZE))
            #highlight moves from that square
            s.fill(p.Color('yellow'))
            for move in validMoves:
                if move.startRow == r and move.startCol == c:
                    screen.blit(s,(move.endCol*SQ_SIZE,move.endRow*SQ_SIZE))


## Graphics on Board
def drawGameState(screen, gs,validMoves,sqSELECTED):
    drawBoard(screen) #draw squares on board
    highlightSquares(screen,gs,gs.getValidMoves(),sqSELECTED)
    drawPieces(screen,gs.board)

def drawBoard(screen):
    ##draw squares
    global colors
    colors = [p.Color("white"),p.Color("gray")]
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            color = colors[((r+c)%2)]
            p.draw.rect(screen, color, p.Rect(c*SQ_SIZE,r*SQ_SIZE,SQ_SIZE,SQ_SIZE)) 

def drawPieces(screen, board):
    ##draw pieces
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            piece = board[r][c]
            if piece != "--":
                screen.blit(IMAGES[piece],p.Rect(c*SQ_SIZE,r*SQ_SIZE,SQ_SIZE,SQ_SIZE))

'''
Animating a move
'''
def animateMove(move,screen,board,clock):
    global colors
    coords = [] #list of coordinates that the animation will move through
    dR = move.endRow - move.startRow
    dC = move.endCol - move.startCol
    framesPerSquare = 10 #frames to move one square
    frameCount = (abs(dR) + abs(dC))*framesPerSquare
    for frame in range(frameCount + 1):
        r,c = (move.startRow + dR*frame/frameCount, move.startCol + dC*frame/frameCount)
        drawBoard(screen)
        drawPieces(screen,board)
        #erase the piece from ending square
        color = colors[(move.endRow + move.endCol) % 2]
        endSquare = p.Rect(move.endCol*SQ_SIZE,move.endRow*SQ_SIZE,SQ_SIZE,SQ_SIZE)
        p.draw.rect(screen,color,endSquare)
        #draw captured piece onto rectangle
        if move.pieceCaptured != '--':
            screen.blit(IMAGES[move.pieceCaptured],endSquare)
        #draw moving piece
        screen.blit(IMAGES[move.pieceMoved],p.Rect(c*SQ_SIZE,r*SQ_SIZE,SQ_SIZE,SQ_SIZE))
        p.display.flip()
        clock.tick(60)

def drawText(screen,text):
    # print("called")
    font = p.font.SysFont("Helvitca",32,True,False)
    textObject = font.render(text,0,p.Color('Gray'))
    textLocation = p.Rect(0,0,WIDTH,HEIGHT).move(WIDTH/2 - textObject.get_width()/2,HEIGHT/2 - textObject.get_height()/2)
    screen.blit(textObject,textLocation)
    textObject = font.render(text,0,p.Color('Black'))
    screen.blit(textObject,textLocation.move(2,2))

if __name__ == "__main__":
    main()
